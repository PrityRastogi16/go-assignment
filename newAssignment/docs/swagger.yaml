basePath: /
definitions:
  controller.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  controller.SuccessResponse:
    properties:
      error:
        type: string
    type: object
  controller.SuccessTokenResponse:
    properties:
      accessToken:
        type: string
      message:
        type: string
    type: object
  models.Author:
    properties:
      bio:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.Blog:
    type: object
  models.Category:
    type: object
  models.CategoryCreationResponse:
    properties:
      id:
        type: integer
      image:
        type: string
      name:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      status:
        type: string
    type: object
host: localhost:2002
info:
  contact: {}
  description: A Tag service API in Go using Gin framework
  title: Tag Service API
  version: "2.0"
paths:
  /author:
    get:
      description: Fetches a list of all authors from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Author'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: List all authors
      tags:
      - Author
    post:
      consumes:
      - application/json
      description: Creates a new author
      parameters:
      - description: Author Details
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/models.Author'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Author'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: Create an author
      tags:
      - Author
  /author/{id}:
    delete:
      description: Deletes an author by its ID
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: Delete an author
      tags:
      - Author
  /blog:
    get:
      description: Get Blogs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Blog'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: Get all blogs
      tags:
      - Blogs
    post:
      consumes:
      - multipart/form-data
      description: Create a new blog post
      parameters:
      - description: Blog Image
        in: formData
        name: image
        required: true
        type: file
      - description: Blog Details
        in: body
        name: blog
        required: true
        schema:
          $ref: '#/definitions/models.Blog'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: Create Blog Post
      tags:
      - Blogs
  /blog/{id}:
    delete:
      description: Deletes a blog post by its ID
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: Delete a blog post
      tags:
      - Blogs
    put:
      consumes:
      - application/json
      description: Update the details of existing blog
      parameters:
      - description: Blog ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Blog Details
        in: body
        name: blog
        required: true
        schema:
          $ref: '#/definitions/models.Blog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Blog'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: Update a blog post
      tags:
      - Blogs
  /categories:
    get:
      description: Fetches a list of all categories from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: List all categories
      tags:
      - Category
  /category:
    post:
      consumes:
      - multipart/form-data
      description: Creates a new category with an image
      parameters:
      - description: Category Image
        in: formData
        name: image
        required: true
        type: file
      - description: Category Details
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CategoryCreationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: Create a category
      tags:
      - Category
  /category/{id}:
    delete:
      description: Deletes a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: Delete a category
      tags:
      - Category
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return an access token
      parameters:
      - description: User Credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: User Login
      tags:
      - User
  /logout:
    post:
      description: Invalidate the user's session token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      security:
      - bearerToken: []
      summary: Logout a user
      tags:
      - User
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controller.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ErrorResponse'
      summary: User Signup
      tags:
      - User
securityDefinitions:
  bearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
